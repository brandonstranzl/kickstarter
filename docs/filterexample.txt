class Events extends Component {
  constructor(props) {
    super(props)
    this.state = {
      filter: {},
      /* filter: {field: 'type', value: 'webapp'} */
      events: [{name: "Ms Office"}]
    }
  }


  addFilter = (filter) => {
    /* filter -> {field: 'category', value: 'mobileapp'} */
    this.setState({filter: filter})
  }

  removeFilter = () => {
    this.setState(filter: {})
  }


  render() {
    // Here we can filter the events based on the filters in the datatse
    let eventsToShow;
    if (this.state.filter) {
      eventToShow = this.state.events.filter(event => event.type == this.state.filter.type)
    } else {
      eventsToShow = this.state.events
    }

    return (

      <button onClick={() => this.addFilter({field: 'type', value: 'mobileapp'})}>Mobile Apps</button>
      <button onClick={() => this.addFilter({field: 'type', value: 'WebApps'})}>Web Apps</button>
      <button onClick={() => this.addFilter({field: 'type', value: 'games'})}>Games</button>

      <div onClick={() => this.addFilterToList({field: 'type', value: 'mobileapp'})}></div>
      <button onClick={() => this.removeFilter()}>Remove  Filter</button>
      <div>
        { ... redner filters list here }
        render all the eventsToShow
        { eventsToShow.map(val => <p>{val.name}</p>)
      </div>
    )
  }
}
